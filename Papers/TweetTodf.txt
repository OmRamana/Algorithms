import tweepy
import json
import csv
import pandas as pd
import pyodbc
import psycopg2
from psycopg2 import Error

with open('config_NoKeywords_LeeCounty.json') as f:
    config = json.load(f)

auth = tweepy.OAuthHandler(config['consumer_key'], config['consumer_secret'])
auth.set_access_token(config['access_token'], config['access_token_secret'])
api = tweepy.API(auth, wait_on_rate_limit=False)

searchString = '#' + ' OR #'.join(config['keywords'])
geocode = "{},{},{}km".format(
    config['latitude'], config['longitude'], config['kms'])

if len(config['since']) > 0:
    searchString = "{} since:{}".format(searchString, config['since'])

print(searchString)

items = []
retweets = []

count = 0

# max_tweets = config['limits']
max_tweets = 60

try:
    cursor = tweepy.Cursor(api.search_tweets, q=searchString, geocode=geocode,
                           count=20, lang="en", tweet_mode='extended')
    for tweet in cursor.items():
        count = count + 1
        if count % 20 == 0:
            print('Tweets: ', count)

        user = tweet.user

        items.append({
            "Internal Location": "Lee County, FL",
            "userid": user.id,
            "username": user.name,
            "userdescription": user.description,
            "userscreenname": user.screen_name,
            "userlocation": user.location,
            "userurl": user.url,
            "userfollowers": user.followers_count,
            "userfriends": user.friends_count,
            "userfavourites": user.favourites_count,
            "userlists": user.listed_count,
            "usercreated": user.created_at,
            "userlang": user.lang,

            "tweetid": tweet.id,
            "tweetext": tweet.full_text,
            "tweetcreated": tweet.created_at,
            "retweeted": tweet.retweeted,
            "retweet_count": tweet.retweet_count,
            "favorited": tweet.favorited,
            "favorite_count": tweet.favorite_count,
            "lang": tweet.lang,
        })

        if count > max_tweets:
            break

except Exception as e:
    print(str(e))

df = pd.DataFrame(items)
df = df.astype('str')
df.userdescription = df.userdescription.str.replace('\n', ' ')
df = df.drop_duplicates(subset='tweetid')

for index, row in df.iterrows():
    rwts = api.get_retweets(row['tweetid'])
    for tweet in rwts:
        retweets.append({
            "RetweetID": tweet.id,
            "TweeterID": tweet.user.id,
            "OriginalTweeterID": row['userid'],
            "Date": tweet.created_at
        })

df2 = pd.DataFrame(retweets)

# this is the name of the server can also be found on azure
server = "dkomplexdev.database.windows.net"
database = "dkomlexcountydata"
username = "dkompdev"  # Server Admin
password = "dKomplex1"  # Server Admin
# A driver is for maintaining the connection Only can be done on windows to my knowledge
driver = '{ODBC Driver 17 for SQL Server}'
# conn = pyodbc.connect('DRIVER='+driver+';SERVER='+server +
#                       ';PORT=1433;DATABASE='+database+';UID='+username+';PWD=' + password)
# print("connection worked")

# unique_tweetids = pd.read_sql(
#     "SELECT DISTINCT(tweetid) from Twitter_Core", conn)


# df_new_tweet_id = df[~df.tweetid.isin(unique_tweetids.tweetid)]
# cursor = conn.cursor()
# cursor.fast_executemany = True

# cursor.executemany("""INSERT INTO Twitter_Core
# (Internal_Location, userid, username, userdescription, userscreenname,
# userlocation, userurl, userfollowers, userfriends, userfavourites, userlists,
# usercreated, userlang, tweetid, tweetext,tweetcreated, retweeted, retweet_count,
# favorited, favorite_count, lang) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)""", df_new_tweet_id.values.tolist())
# conn.commit()


try:
    # Connect to an existing database
    connection = psycopg2.connect(dbname="retweeting",
                                  user="jerrykankelborg",
                                  password="platoon",
                                  host="localhost",
                                  port="5432"
                                  )

    # Create a cursor to perform database operations
    cursor = connection.cursor()
    # Print PostgreSQL details
    print("PostgreSQL server information")
    print(connection.get_dsn_parameters(), "\n")
    # Executing a SQL query
    cursor.executemany("""INSERT INTO retweets
    (retweet_id, tweeter_id, original_tweeter_id, tweet_date) values(?,?,?,?);""", df2.values.tolist())
    connection.commit()

except (Exception, Error) as error:
    print("Error while connecting to PostgreSQL", error)
finally:
    if (connection):
        cursor.close()
        connection.close()
        print("PostgreSQL connection is closed")